# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'layout_crear.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
import requests, json, geocoder, base64
from zeep import Client


class Ui_Crear(object):
    def setupUi(self, Dialog, loc):
        Dialog.setObjectName("Dialog")
        Dialog.resize(477, 412)
        self.layoutWidget = QtWidgets.QWidget(Dialog)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 30, 451, 251))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.lbl_sector = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.lbl_sector.setFont(font)
        self.lbl_sector.setObjectName("lbl_sector")
        self.gridLayout.addWidget(self.lbl_sector, 2, 0, 1, 1)
        self.lbl_Latitud = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.lbl_Latitud.setFont(font)
        self.lbl_Latitud.setObjectName("lbl_Latitud")
        self.gridLayout.addWidget(self.lbl_Latitud, 4, 0, 1, 1)
        self.cbx_nivel = QtWidgets.QComboBox(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.cbx_nivel.setFont(font)
        self.cbx_nivel.setObjectName("cbx_nivel")
        self.cbx_nivel.addItem("")
        self.cbx_nivel.addItem("")
        self.cbx_nivel.addItem("")
        self.cbx_nivel.addItem("")
        self.cbx_nivel.addItem("")
        self.cbx_nivel.addItem("")
        self.gridLayout.addWidget(self.cbx_nivel, 3, 1, 1, 2)
        self.lbl_nombre = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.lbl_nombre.setFont(font)
        self.lbl_nombre.setObjectName("lbl_nombre")
        self.gridLayout.addWidget(self.lbl_nombre, 1, 0, 1, 1)
        self.txt_sector = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.txt_sector.setFont(font)
        self.txt_sector.setObjectName("txt_sector")
        self.gridLayout.addWidget(self.txt_sector, 2, 1, 1, 2)
        self.lbl_Longitud = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.lbl_Longitud.setFont(font)
        self.lbl_Longitud.setObjectName("lbl_Longitud")
        self.gridLayout.addWidget(self.lbl_Longitud, 5, 0, 1, 1)
        self.txt_latitud = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.txt_latitud.setFont(font)
        self.txt_latitud.setObjectName("txt_latitud")
        self.gridLayout.addWidget(self.txt_latitud, 4, 1, 1, 2)
        self.lbl_nivel = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.lbl_nivel.setFont(font)
        self.lbl_nivel.setObjectName("lbl_nivel")
        self.gridLayout.addWidget(self.lbl_nivel, 3, 0, 1, 1)
        self.txt_nombre = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.txt_nombre.setFont(font)
        self.txt_nombre.setObjectName("txt_nombre")
        self.gridLayout.addWidget(self.txt_nombre, 1, 1, 1, 2)
        self.txt_longitud = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.txt_longitud.setFont(font)
        self.txt_longitud.setObjectName("txt_longitud")
        self.gridLayout.addWidget(self.txt_longitud, 5, 1, 1, 2)
        self.lbl_registro = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.lbl_registro.setFont(font)
        self.lbl_registro.setObjectName("lbl_registro")
        self.gridLayout.addWidget(self.lbl_registro, 0, 1, 1, 1)
        self.lbl_foto = QtWidgets.QLabel(self.layoutWidget)
        self.lbl_foto.setObjectName("lbl_foto")
        self.gridLayout.addWidget(self.lbl_foto, 6, 0, 1, 1)
        self.btn_foto = QtWidgets.QPushButton(self.layoutWidget)
        self.btn_foto.setObjectName("btn_foto")
        self.gridLayout.addWidget(self.btn_foto, 6, 1, 1, 2)
        self.layoutWidget1 = QtWidgets.QWidget(Dialog)
        self.layoutWidget1.setGeometry(QtCore.QRect(180, 300, 111, 101))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.rdbtn_REST_crear = QtWidgets.QRadioButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.rdbtn_REST_crear.setFont(font)
        self.rdbtn_REST_crear.setChecked(True)
        self.rdbtn_REST_crear.setObjectName("rdbtn_REST_crear")
        self.verticalLayout.addWidget(self.rdbtn_REST_crear)
        self.rdbtn_SOAP_crear = QtWidgets.QRadioButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.rdbtn_SOAP_crear.setFont(font)
        self.rdbtn_SOAP_crear.setObjectName("rdbtn_SOAP_crear")
        self.verticalLayout.addWidget(self.rdbtn_SOAP_crear)
        self.btn_registrar = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.btn_registrar.setFont(font)
        self.btn_registrar.setObjectName("btn_registrar")
        self.verticalLayout.addWidget(self.btn_registrar)

        self.retranslateUi(Dialog, loc)
        self.cbx_nivel.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        #Funcionalidades
        #self.btn_foto.clicked.connect(self.foto)
        self.btn_registrar.clicked.connect(self.enviar)

    def retranslateUi(self, Dialog, loc):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.lbl_sector.setText(_translate("Dialog", "Sector: "))
        self.lbl_Latitud.setText(_translate("Dialog", "Latitud: "))
        self.cbx_nivel.setCurrentText(_translate("Dialog", "<Seleccione>"))
        self.cbx_nivel.setItemText(0, _translate("Dialog", "<Seleccione>"))
        self.cbx_nivel.setItemText(1, _translate("Dialog", "Básico"))
        self.cbx_nivel.setItemText(2, _translate("Dialog", "Bachiller"))
        self.cbx_nivel.setItemText(3, _translate("Dialog", "Grado Universitario"))
        self.cbx_nivel.setItemText(4, _translate("Dialog", "Posgrado"))
        self.cbx_nivel.setItemText(5, _translate("Dialog", "Doctorado"))
        self.lbl_nombre.setText(_translate("Dialog", "Nombre: "))
        self.lbl_Longitud.setText(_translate("Dialog", "Longitud: "))
        self.lbl_nivel.setText(_translate("Dialog", "Nivel educativo: "))
        self.lbl_registro.setText(_translate("Dialog", "Registrar Persona"))
        self.lbl_foto.setText(_translate("Dialog", "Foto:"))
        self.btn_foto.setText(_translate("Dialog", "Tomar foto"))
        self.rdbtn_REST_crear.setText(_translate("Dialog", "REST"))
        self.rdbtn_SOAP_crear.setText(_translate("Dialog", "SOAP"))
        self.btn_registrar.setText(_translate("Dialog", "Registrar"))
        self.txt_latitud.setText(str(loc[0]))
        self.txt_longitud.setText(str(loc[1]))
        self.txt_latitud.setEnabled(False)
        self.txt_longitud.setEnabled(False)


    #Funcion para agregar la foto, comentado hasta resolver lo de cv2
    # def foto(self):

    #     cam = cv2.VideoCapture(0)
    #     cv2.namedWindow("test")

    #     while True:
    #         ret, frame = cam.read()
    #         if not ret:
    #             print("failed to grab frame")
    #             break
    #         cv2.imshow("test", frame)

    #         k = cv2.waitKey(1)
    #         if k%256 == 27:
    #             #ESC pressed
    #             print("Escape hit, closing...")
    #             break
    #         elif k%256 == 32:
    #             #Space pressed
    #             img_name = "lastpicture.jpeg"
    #             cv2.imwrite(img_name, frame)
    #             print("{} written!".format(img_name))

    #     cam.release()
    #     cv2.destroyAllWindows()
    
    def enviar(self): #FALTA PROBAR LA CREACION DE PERSONA MEDIANTE EL CLIENTE Y CUADRAR EL JSON PARA ESO EN AMBOS CLIENTES
        if self.rdbtn_REST_crear.isChecked():
            url = "https://registro.drakath.studio/REST/"
            # try:
            #     image = open('lastpicture.jpeg', 'rb')
            #     image_read = image.read()
            #     encoded = base64.b64encode(image_read).decode("utf-8")
            # except Exception as e:
            #     print(e)
            #     return
            #Datos de la persona
            nombre = self.txt_nombre.text()
            sector = self.txt_sector.text()
            nivelEducativo = str(self.cbx_nivel.currentText())
            latitud = self.txt_latitud.text()
            longitud = self.txt_longitud.text()
            foto = {}
            usuario = "admin"

            if nombre == "" or sector == "" or nivelEducativo == "<Seleccione>":
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Campo Vacío")
                msg.setInformativeText("Hay uno o más campos vacíos en el formulario.")
                msg.setWindowTitle("Error")
                msg.exec_()
            else:
                try:
                    data = {"nombre": nombre, 
                    "sector": sector, 
                    "nivelEscolar": nivelEducativo,
                    "latitud": latitud, 
                    "longitud": longitud 
                    }
                
                    info = json.dumps(data)
                    req = requests.post(url = url, data = info)

                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setInformativeText("Se realizó el registro satisfactoriamente")
                    msg.setWindowTitle("Registro")
                    msg.exec_()

                    self.txt_nombre.setText("")
                    self.txt_sector.setText("")
                    self.cbx_nivel.setCurrentIndex(0)

                except Exception as e:
                    print(e)


        elif self.rdbtn_SOAP_crear.isChecked():
            cli = Client("https://registro.drakath.studio/ws/PersonaWebServices?wsdl")
            # try:
            #     image = open('lastpicture.jpeg', 'rb')
            #     image_read = image.read()
            #     encoded = base64.b64encode(image_read).decode("utf-8")
            # except Exception as e:
            #     print(e)
            #     return
            #Datos de la persona
            nombre = self.txt_nombre.text()
            sector = self.txt_sector.text()
            nivelEducativo = str(self.cbx_nivel.currentText())
            latitud = self.txt_latitud.text()
            longitud = self.txt_longitud.text()
            foto = {}

            if nombre == "" or sector == "" or nivelEducativo == "<Seleccione>":
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Campo Vacío")
                msg.setInformativeText("Hay uno o más campos vacíos en el formulario.")
                msg.setWindowTitle("Error")
                msg.exec_()
            else:
                try:
                    data = {"nombre": nombre, 
                    "sector": sector, 
                    "nivelEscolar": nivelEducativo,
                    "latitud": latitud, 
                    "longitud": longitud 
                    }

                    info = json.dumps(data)
                    cli.service.crearPersona(info)

                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setInformativeText("Se realizó el registro satisfactoriamente")
                    msg.setWindowTitle("Registro")
                    msg.exec_()

                    self.txt_nombre.setText("")
                    self.txt_sector.setText("")
                    self.cbx_nivel.setCurrentIndex(0)

                except Exception as e:
                    print(e)


# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     Dialog = QtWidgets.QDialog()
#     ui = Ui_Dialog()
#     myloc = geocoder.ip('me')
#     ui.setupUi(Dialog)
#     Dialog.show()
#     sys.exit(app.exec_())
